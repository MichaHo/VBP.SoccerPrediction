<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SoccerPrediction.View">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Defaults.xaml"/>
        <ResourceDictionary Source="Icons.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--#region Buttons -->

    <Style x:Key="HoverlessButton" TargetType="{x:Type Button}" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SystemIconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource HoverlessButton}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Padding" Value="10" />
    </Style>

    <Style TargetType="{x:Type Button}" >
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            CornerRadius="4"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="3" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            Padding="10">
                        <ContentControl Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush"  Value="{StaticResource ButtonHoverBorderBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush"  Value="{StaticResource ButtonDisabledBorderBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconButton" TargetType="{x:Type Button}" >
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}" />
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Border.RenderTransform>
                            <ScaleTransform />
                        </Border.RenderTransform>
                        <Border.RenderTransformOrigin>
                            <Point X="0.5" Y="0.5" />
                        </Border.RenderTransformOrigin>

                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <ContentPresenter Content="{TemplateBinding Content}" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground"  Value="{StaticResource ButtonForegroundDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconGrowButton" TargetType="{x:Type Button}" >
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="8"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Border.RenderTransform>
                            <ScaleTransform />
                        </Border.RenderTransform>
                        <Border.RenderTransformOrigin>
                            <Point X="0.5" Y="0.5" />
                        </Border.RenderTransformOrigin>

                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <ContentPresenter Content="{TemplateBinding Content}" Focusable="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground"  Value="{StaticResource ButtonForegroundDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region Window Styles -->

    <Style x:Key="DefaultWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border x:Name="MainOuterBorder" Margin="5,5,25,5"  >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="AppLabel" Grid.Row="0" Grid.RowSpan="2" Margin="0,0,-26,0" BorderBrush="{StaticResource WindowLabelBorderBrush}" BorderThickness="2" Background="{StaticResource WindowLabelBackgroundBrush}" CornerRadius="0,0,10,10" HorizontalAlignment="Right" VerticalAlignment="Top" Panel.ZIndex="0" >
                                <Label Content="VBP Community" Foreground="{StaticResource WindowLabelForegroundBrush}" FontSize="9.5" Padding="10" />
                                <Border.LayoutTransform>
                                    <RotateTransform Angle="270"/>
                                </Border.LayoutTransform>
                            </Border>
                            <Border x:Name="OuterBorder" Grid.Row="1" BorderBrush="{StaticResource WindowBorderBrush}" BorderThickness="2" Background="{StaticResource WindowBackgroundBrush}" CornerRadius="10,0,10,10" Padding="5">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <!-- Title Row -->
                                        <RowDefinition Height="42" />
                                        <!-- Content Row -->
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Border x:Name="TitleBorder" BorderBrush="{StaticResource WindowBorderBrush}" BorderThickness="0,0,0,1">
                                        <Grid Grid.Row="0" x:Name="TitleGrid">
                                            <Grid.ColumnDefinitions>
                                                <!-- Icon Column -->
                                                <ColumnDefinition Width="Auto" />
                                                <!-- Title Column -->
                                                <ColumnDefinition Width="*" />
                                                <!-- ControlBox Column -->
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Button Style="{StaticResource SystemIconButton}" 
                                                    Content="{StaticResource IconSoccer}" 
                                                    Grid.Column="0" Foreground="{StaticResource ButtonForegroundBrush}"/>
                                            <TextBlock Text="{Binding WindowTitle}" 
                                                       Grid.Column="0" 
                                                       Grid.ColumnSpan="3" 
                                                       FontWeight="Bold"
                                                       FontSize="18"
                                                       Foreground="{StaticResource WindowForegroundBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            <StackPanel Grid.Column="2" Orientation="Horizontal">
                                                <Button Style="{StaticResource IconGrowButton}" 
                                                        Content="{StaticResource IconMinimize}" 
                                                        Foreground="{StaticResource ButtonForegroundBrush}"
                                                        Height="30" Command="{Binding MinimizeCommand}"/>
                                                <Button Style="{StaticResource IconGrowButton}" 
                                                        Content="{StaticResource IconMaximize}" 
                                                        Foreground="{StaticResource ButtonForegroundBrush}"
                                                        Height="30" Command="{Binding MaximizeCommand}"/>
                                                <Button Style="{StaticResource IconGrowButton}" 
                                                        Content="{StaticResource IconClose}" 
                                                        Foreground="{StaticResource ButtonForegroundBrush}"
                                                        Height="30" Command="{Binding CloseCommand}"/>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                    <Border x:Name="ContentBorder" Grid.Row="1"  Margin="5" ClipToBounds="True" >
                                        <ContentPresenter Content="{TemplateBinding Content}"/>
                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Expander Styles -->

    <ControlTemplate x:Key="ExpanderButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"            
                Padding="{TemplateBinding Padding}" >
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Rectangle Fill="Transparent"
                           Grid.RowSpan="2"/>

                <Canvas Width="24" Height="24">
                    <Path x:Name="Sign" 
                          Fill="{TemplateBinding Foreground}"                              
                          Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z" />
                </Canvas>
                <ContentPresenter x:Name="HeaderContent"
                                  Grid.Row="1"
                                  Margin="5"
                                  ContentSource="Content"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" TargetName="Sign" Value="M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="ExpandDirection" Value="Right"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ToggleButton x:Name="ExpanderButton"
                                      Grid.Column="0"
                                      Template="{StaticResource ExpanderButtonTemplate}"
                                      Content="{TemplateBinding Header}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      OverridesDefaultStyle="True"
                                      Padding="2">
                        </ToggleButton>
                        <ContentPresenter x:Name="ExpanderContent"
                                          Visibility="Collapsed"
                                          Grid.Column="1">
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
    
    
    
</ResourceDictionary>